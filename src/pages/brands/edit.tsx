/* eslint-disable @typescript-eslint/no-explicit-any */
import { PlusOutlined } from "@ant-design/icons";
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input, message, Modal, Spin, Upload } from "antd";
import type { UploadFile } from "antd/es/upload/interface";
import axios from "axios";
import { useEffect, useState } from "react";
import { CLOUDINARY_URL } from "../../config/dataProvider";
import Loader from "../../utils/loading";

export const BrandEdit = () => {
  const { formProps, saveButtonProps, queryResult, formLoading } = useForm({
    successNotification: () => ({
      message: "üéâ C·∫≠p nh·∫≠t th√†nh c√¥ng",
      description: "Th∆∞∆°ng hi·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
      type: "success" as const,
    }),
    errorNotification: (error: any) => ({
      message: "‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i! " + error.response?.data?.error,
      description: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.",
      type: "error" as const,
    }),
  });
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const [previewImage, setPreviewImage] = useState<string>();
  const [previewVisible, setPreviewVisible] = useState(false);
  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>();

  const record = queryResult?.data?.data;

  useEffect(() => {
    if (record?.logoUrl) {
      const initialFile: UploadFile = {
        uid: "-1",
        name: "logo.png",
        status: "done",
        url: record.logoUrl,
      };
      setFileList([initialFile]);
      setPreviewImage(record.logoUrl);
      setUploadedImageUrl(record.logoUrl);
    }
  }, [record]);

  const handlePreview = async (file: UploadFile) => {
    if (!file.url && !file.preview && file.originFileObj) {
      const reader = new FileReader();
      reader.onload = () => {
        setPreviewImage(reader.result as string);
        setPreviewVisible(true);
      };
      reader.readAsDataURL(file.originFileObj);
    } else {
      setPreviewImage(file.url || file.preview);
      setPreviewVisible(true);
    }
  };

  const handleChange = async ({ fileList }: { fileList: UploadFile[] }) => {
    const latestFile = fileList.slice(-1);
    setFileList(latestFile);

    const file = latestFile[0]?.originFileObj as File;
    if (!file.type.startsWith("image")) {
      message.error("Vui l√≤ng ch·ªâ t·∫£i l√™n ·∫£nh.");
      return;
    }

    if (file) {
      const formData = new FormData();
      formData.append("file", file);
      formData.append("upload_preset", "Binova_Upload");

      try {
        const { data } = await axios.post(CLOUDINARY_URL, formData);
        if (!data || !data.secure_url) {
          throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL t·ª´ Cloudinary");
        }
        setUploadedImageUrl(data.secure_url);
        message.success("T·∫£i ·∫£nh l√™n th√†nh c√¥ng!");

        const reader = new FileReader();
        reader.onload = (e) => setPreviewImage(e.target?.result as string);
        reader.readAsDataURL(file);
      } catch (error) {
        message.error("L·ªói khi upload ·∫£nh!");
        console.error(error);
      }
    } else {
      setPreviewImage(undefined);
      setUploadedImageUrl(undefined);
    }
  };

  const handleRemove = () => {
    setFileList([]);
    setPreviewImage(undefined);
    setUploadedImageUrl(undefined);
    return true; // Ph·∫£i return true ƒë·ªÉ Ant Design th·ª±c s·ª± x√≥a kh·ªèi UI
  };

  return (
    <Edit
      saveButtonProps={saveButtonProps}
      title="Ch·ªânh s·ª≠a th∆∞∆°ng hi·ªáu"
      isLoading={false}
      canDelete={false}
    >
      <Spin spinning={formLoading} indicator={<Loader />}>
        <Form
          {...formProps}
          layout="vertical"
          onFinish={async (values: any) => {
            try {
              if (!uploadedImageUrl) {
                message.error("B·∫°n ch∆∞a t·∫£i ·∫£nh ho·∫∑c ·∫£nh ch∆∞a upload xong.");
                return;
              }

              if (values.name && typeof values.name === "string") {
                values.name = values.name.trim();
              }

              const payload = {
                name: values.name,
                logoUrl: uploadedImageUrl,
              };

              await formProps?.onFinish?.(payload);
            } catch (error) {
              message.error("L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu!");
              console.error(error);
            }
          }}
        >
          <Form.Item
            label="T√™n th∆∞∆°ng hi·ªáu"
            name={["name"]}
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n th∆∞∆°ng hi·ªáu" },
              { max: 30, message: "T√™n th∆∞∆°ng hi·ªáu kh√¥ng ƒë∆∞·ª£c qu√° 30 k√Ω t·ª±" },
              { min: 2, message: "T√™n th∆∞∆°ng hi·ªáu ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±" },
              {
                pattern: /^[\p{L}0-9\s-]+$/u,
                message: "T√™n th∆∞∆°ng hi·ªáu kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát",
              },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="H√¨nh ·∫£nh"
            name="logoUrl"
            rules={[
              { required: true, message: "Vui l√≤ng t·∫£i ·∫£nh cho th∆∞∆°ng hi·ªáu" },
            ]}
          >
            <Upload
              listType="picture-card"
              fileList={fileList}
              onChange={handleChange}
              onPreview={handlePreview}
              onRemove={handleRemove}
              maxCount={1}
              beforeUpload={() => false}
            >
              {fileList.length >= 1 ? null : (
                <div>
                  <PlusOutlined />
                  <div style={{ marginTop: 8 }}>Upload</div>
                </div>
              )}
            </Upload>

            <Modal
              open={previewVisible}
              footer={null}
              onCancel={() => setPreviewVisible(false)}
            >
              <img alt="preview" style={{ width: "100%" }} src={previewImage} />
            </Modal>
          </Form.Item>
        </Form>
      </Spin>
    </Edit>
  );
};
