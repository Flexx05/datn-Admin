/* eslint-disable @typescript-eslint/no-explicit-any */
import { Edit, useForm, useSelect } from "@refinedev/antd";
import { Form, Input, Select, Spin, message } from "antd";
import { useMemo } from "react";
import { ICategory } from "../../interface/category";
import Loader from "../../utils/loading";
import { SaveButton } from "../../utils/ButtonForManagement";

export const CategoryEdit = () => {
  const {
    formProps,
    saveButtonProps,
    queryResult: editQueryResult,
    formLoading,
  } = useForm({
    successNotification: () => ({
      message: "üéâ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!",
      description: "Danh m·ª•c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong h·ªá th·ªëng.",
      type: "success",
    }),
    errorNotification: (error: any) => ({
      message: "‚ùå C·∫≠p nh·∫≠t danh m·ª•c th·∫•t b·∫°i! " + error.response?.data?.error,
      description: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.",
      type: "error",
    }),
  });

  const editingRecord = editQueryResult?.data?.data as ICategory | undefined;

  const { queryResult } = useSelect({
    resource: "category",
    optionLabel: "name",
    optionValue: "_id",
    pagination: {
      mode: "off",
    },
  });

  const allCategories = useMemo(
    () => (queryResult?.data?.data as ICategory[]) || [],
    [queryResult?.data?.data]
  );

  // N·∫øu danh m·ª•c hi·ªán t·∫°i l√† danh m·ª•c cha (parentId === null) th√¨ kh√¥ng cho ch·ªânh s·ª≠a parentId
  const isParentCategory = editingRecord?.parentId === null;

  const filteredOptions = useMemo(() => {
    if (!editingRecord) return [];

    return allCategories
      .filter(
        (item: ICategory) =>
          item._id !== editingRecord._id &&
          item.parentId === null &&
          item.isActive === true &&
          item.slug !== "danh-muc-khong-xac-dinh"
      )
      .map((item) => ({
        label: item.name,
        value: item._id,
      }));
  }, [allCategories, editingRecord]);

  const handleFinish = async (values: any) => {
    try {
      const parentId = values.parentId ?? null;
      if (parentId) {
        const parent = allCategories.find((item) => item._id === parentId);
        if (!parent || !parent.isActive || parent.parentId !== null) {
          message.error("Danh m·ª•c cha kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã xo√°.");
          return;
        }
      }

      if (values.name && typeof values.name === "string") {
        values.name = values.name.trim();
      }

      formProps?.onFinish?.({ ...values, parentId });
    } catch (error) {
      message.error("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.");
    }
  };

  return (
    <Edit
      saveButtonProps={SaveButton("C·∫≠p nh·∫≠t danh m·ª•c", saveButtonProps)}
      title="C·∫≠p nh·∫≠t danh m·ª•c"
      canDelete={false}
      isLoading={false}
    >
      <Spin spinning={formLoading} indicator={<Loader />}>
        <Form {...formProps} layout="vertical" onFinish={handleFinish}>
          <Form.Item
            label="T√™n danh m·ª•c"
            name={["name"]}
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n danh m·ª•c" },
              { max: 30, message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c qu√° 30 k√Ω t·ª±" },
              { min: 3, message: "T√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±" },
              {
                pattern: /^[\p{L}0-9\s&]+$/u,
                message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát",
              },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item label="M√¥ t·∫£" name={["description"]}>
            <Input />
          </Form.Item>

          <Form.Item
            label="Danh m·ª•c cha"
            name={["parentId"]}
            normalize={(value) =>
              value === "" || value === undefined ? null : value
            }
          >
            <Select
              loading={queryResult?.isLoading}
              placeholder="Ch·ªçn danh m·ª•c cha"
              disabled={isParentCategory} // ‚ùó Disable n·∫øu ƒëang l√† danh m·ª•c cha
              allowClear
            >
              <Select.Option value={null}>Kh√¥ng c√≥</Select.Option>
              {filteredOptions.map((option) => (
                <Select.Option key={option.value} value={option.value}>
                  {option.label}
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Spin>
    </Edit>
  );
};
