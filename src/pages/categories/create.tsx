/* eslint-disable @typescript-eslint/no-explicit-any */
import { Create, useForm, useSelect } from "@refinedev/antd";
import { Form, Input, Select, message } from "antd";
import { useMemo } from "react";
import { ICategory } from "../../interface/category";
import { HttpError } from "@refinedev/core";

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm({
    successNotification: () => ({
      message: "üéâ T·∫°o danh m·ª•c th√†nh c√¥ng!",
      description: "Danh m·ª•c m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.",
      type: "success",
    }),
    errorNotification: (error?: HttpError) => ({
      message:
        "‚ùå T·∫°o danh m·ª•c th·∫•t b·∫°i! " + (error?.response?.data?.message ?? ""),
      description: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.",
      type: "error",
    }),
  });

  // L·∫•y danh s√°ch danh m·ª•c
  const { queryResult } = useSelect({
    resource: "category",
    optionLabel: "name",
    optionValue: "_id",
    pagination: {
      mode: "off",
    },
  });

  // T·ªëi ∆∞u h√≥a d·ªØ li·ªáu danh m·ª•c
  const allCategories = useMemo(
    () => (queryResult?.data?.data as ICategory[]) || [],
    [queryResult?.data?.data]
  );

  // L·ªçc ra c√°c danh m·ª•c cha h·ª£p l·ªá
  const filteredOptions = useMemo(() => {
    return allCategories
      .filter((item: ICategory) => item.parentId === null && item.isActive)
      .map((item) => ({
        label: item.name,
        value: item._id,
      }));
  }, [allCategories]);

  // X·ª≠ l√Ω khi submit form
  const handleFinish = async (values: any) => {
    const parentId = values.parentId;
    if (parentId) {
      const parent = allCategories.find((item) => item._id === parentId);
      if (!parent || !parent.isActive || parent.parentId !== null) {
        message.error("Danh m·ª•c cha kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã xo√°.");
        return;
      }
    }

    formProps?.onFinish?.({ ...values, parentId });
  };

  return (
    <Create saveButtonProps={saveButtonProps} title="T·∫°o danh m·ª•c">
      <Form {...formProps} layout="vertical" onFinish={handleFinish}>
        <Form.Item
          label="T√™n danh m·ª•c"
          name={["name"]}
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n danh m·ª•c" }]}
        >
          <Input />
        </Form.Item>

        <Form.Item label="M√¥ t·∫£" name={["description"]}>
          <Input />
        </Form.Item>

        <Form.Item label="Danh m·ª•c cha" name={["parentId"]}>
          <Select
            loading={queryResult?.isLoading}
            placeholder="Ch·ªçn danh m·ª•c cha (n·∫øu c√≥)"
            allowClear
            defaultValue={null}
          >
            <Select.Option value={null}>Kh√¥ng c√≥</Select.Option>
            {filteredOptions.map((option) => (
              <Select.Option key={option.value} value={option.value}>
                {option.label}
              </Select.Option>
            ))}
          </Select>
        </Form.Item>
      </Form>
    </Create>
  );
};
