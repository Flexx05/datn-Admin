/* eslint-disable @typescript-eslint/no-explicit-any */
import { Create, useForm, useSelect } from "@refinedev/antd";
import { Form, Input, Select, message } from "antd";
import { useMemo } from "react";
import { ICategory } from "../../interface/category";

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm({
    successNotification: () => ({
      message: "üéâ T·∫°o danh m·ª•c th√†nh c√¥ng!",
      description: "Danh m·ª•c m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.",
      type: "success",
    }),
    errorNotification: (error: any) => ({
      message: "‚ùå T·∫°o danh m·ª•c th·∫•t b·∫°i! " + error.response?.data?.message,
      description: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω.",
      type: "error",
    }),
  });

  // L·∫•y danh s√°ch danh m·ª•c
  const { queryResult } = useSelect({
    resource: "category",
    optionLabel: "name",
    optionValue: "_id",
    pagination: {
      mode: "off",
    },
  });

  const filteredOptions = useMemo(() => {
    return (queryResult?.data?.data || [])
      .filter((item: any) => item.parentId === null && item.isActive === true)
      .map((item: any) => ({
        label: item.name,
        value: item._id,
      }));
  }, [queryResult?.data?.data]);

  // X·ª≠ l√Ω khi submit form
  const handleFinish = async (values: any) => {
    const parentId = values.parentId;

    if (parentId) {
      const allCategories = queryResult?.data?.data || [];
      const parent: ICategory | undefined = (allCategories as ICategory[]).find(
        (item: ICategory) => item._id === parentId
      );

      if (!parent || parent.isActive !== true || parent.parentId !== null) {
        message.error("Danh m·ª•c cha kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã xo√°.");
        return;
      }
    }

    formProps?.onFinish?.(values); // g·ªçi h√†m submit Refine n·∫øu h·ª£p l·ªá
  };

  return (
    <Create saveButtonProps={saveButtonProps} title="T·∫°o danh m·ª•c">
      <Form {...formProps} layout="vertical" onFinish={handleFinish}>
        <Form.Item
          label="T√™n danh m·ª•c"
          name={["name"]}
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n danh m·ª•c" }]}
        >
          <Input />
        </Form.Item>

        <Form.Item label="M√¥ t·∫£" name={["description"]}>
          <Input />
        </Form.Item>

        <Form.Item
          label="Danh m·ª•c cha"
          name={["parentId"]}
          rules={[{ required: true, message: "Vui l√≤ng ch·ªçn danh m·ª•c cha" }]}
        >
          <Select
            options={filteredOptions}
            loading={queryResult?.isLoading}
            placeholder="Ch·ªçn danh m·ª•c cha"
          />
        </Form.Item>

        <Form.Item label="Th·ª© t·ª± danh m·ª•c" name={["categorySort"]}>
          <Select placeholder="Ch·ªçn th·ª© t·ª±">
            <Select.Option value={1}>1</Select.Option>
            <Select.Option value={2}>2</Select.Option>
            <Select.Option value={3}>3</Select.Option>
          </Select>
        </Form.Item>
      </Form>
    </Create>
  );
};
